import re

f = open("../mysql/initTables.sql", "r")
target = open("../php/MySQLDBConfig.php","w")
target.write("<?php\n\tinclude_once 'DB.php';\n\n\t// This file was automatically generated by the\n\t// setupMySQLDBConfig.py script in /python\n\t$MySQLDBconfig = new DBconf();")

buf = []

firstparen = re.compile(r'^(.+)?\($')
columntype = re.compile(r'^(\w+)(\(\d+\))?,?$')

for line in f:
	for word in line.split():
		buf.append(word)

while len(buf) != 0: # we haven't consumed the buffer up yet
	while len(buf) > 0 and buf[0].upper() != "CREATE":
		buf.pop(0)
	if len(buf) < 2:
		break;
	# buf is starting with a create statement
	if buf[1].upper() != "TABLE":
		buf.pop(0)
		continue
	else:
		# we found a table!
		target.write("\n\n\t$MySQLDBconfig->addScope(\""+buf[2]+"\")")
		#print "discovered table: ", buf[2]
		# remove things until the schema group
		while "(" not in buf[0]:
			buf.pop(0)
		

		if firstparen.match(buf[0]) != None:
			buf.pop(0) # tablename is stuck to paranthesis
		else:
			buf[0] = buf[0][1:]

		while buf[0] != ");": # while we haven't reached the end of statement

			
			
			# buf[0] contains a columnname
			# buf[1] contains a type
			thecol = buf[0]

			# print "thecol is", thecol

			if thecol.upper() == "PRIMARY": #primary key declaration
				keyval = buf[2][1:-1] # assume the third item contains primary key value
				target.write("\n\t\t->declareKey(\""+keyval+"\")")
				buf.pop(0) # the primary
				buf.pop(0) # the key
				buf.pop(0) # the value

			else:
				thetype = columntype.match(buf[1]).group(1).upper()
				req = False
				
				# print "popping off col. expected", thecol, "got", buf.pop(0)
				# print "popping off type. expected", thetype, "got", buf.pop(0)
				buf.pop(0)
				buf.pop(0)

				# print "token is now:", buf[0]
				
				if buf[0].upper() == "NOT" and (buf[1].upper() == "NULL" or buf[1].upper() == "NULL,"):
					req = True
					buf.pop(0) # get rid of NOT
					buf.pop(0) # get ride of NULL
				elif buf[0] == "DEFAULT":
					buf.pop(0) # get rid of default
					buf.pop(0) # get rid of value

				if buf[0] == ",":
					buf.pop(0) # get rid of a comma
				
				if thetype == "INT" or thetype == "INTEGER": 
					target.write("\n\t\t->addDP(\""+thecol+"\", \"integer\", "+str(req)+")")
				elif thetype == "DEC" or thetype == "DECIMAL":
					target.write("\n\t\t->addDP(\""+thecol+"\", \"double\", "+str(req)+")")
				elif thetype == "VARCHAR" or thetype == "CHAR" or thetype == "TEXT":
					target.write("\n\t\t->addDP(\""+thecol+"\", \"string\", "+str(req)+")")
				elif thetype == "BOOL" or thetype == "BOOLEAN":
					target.write("\n\t\t->addDP(\""+thecol+"\", \"boolean\", "+str(req)+")")

		target.write(";")
target.write("\n?>")
target.close()
f.close()
					


